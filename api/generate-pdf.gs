import puppeteer from "puppeteer";

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  const { report } = req.body;

  if (!report) {
    return res.status(400).json({ error: "No report content provided" });
  }

  const html = `
    <html>
      <head>
        <meta charset="utf-8" />
        <style>
          body {
            font-family: Arial, sans-serif;
            padding: 2rem;
            line-height: 1.6;
            white-space: pre-wrap;
            color: #111;
          }
          h1 {
            text-align: center;
            margin-bottom: 2rem;
            color: #2d4de0;
          }
          footer {
            margin-top: 3rem;
            text-align: center;
            font-size: 0.9rem;
            color: #666;
          }
        </style>
      </head>
      <body>
        <h1>StackZero AI Report</h1>
        <div>${report.replace(/\n/g, "<br/>")}</div>
        <footer>Generated by StackZero.ai</footer>
      </body>
    </html>
  `;

  try {
    const browser = await puppeteer.launch({ args: ['--no-sandbox'] });
    const page = await browser.newPage();
    await page.setContent(html, { waitUntil: 'networkidle0' });
    const pdf = await page.pdf({ format: 'A4' });
    await browser.close();

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename=stackzero-report.pdf');
    res.send(pdf);
  } catch (err) {
    console.error("PDF generation error:", err);
    res.status(500).json({ error: "Failed to generate PDF." });
  }
}
